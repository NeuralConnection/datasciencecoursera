install.packages("shiny")
install.packages("learnr")
1+1
matrix(c(1,2,3,4,5,6,7,8),nrow=4,ncol=2)
matrix(c(1,2,3,4,5,6,7,8),nrow=4,ncol=2)
example<-matrix(c(1,2,3,4,5,6,7,8),nrow=4,ncol=2)
View(example)
view(example)
View(example)
1+1
source("C:/R/my.R")
setwd("C:/R")
iris
install.packages(c("ggplot2", "devtools", "1me4""))
install.packages(c("ggplot2","devtools","lme4"))
ggplot2::aes(1,2)
ggplot2(scatter)
sp3<-
source("https://bioconductor.org/biocLite.R")
source("https://bioconductor.org/biocmanager.R")
version
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicFeatures")
installed.packages("devtools")
library(devtools)
install_github("author/package")
library(ggplot2)
session_info()
browseVignettes()
devtool()
help devtools
devtools::install(g)
session_info()
sessionInfo()
install.packages("KernSmooth")
library(KernSmooth)
exit
quit
setwd("C:/R/repos/datasciencecoursera")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
m <- matrix(1:9, 3, 3)
cache_m <- makeCacheMatrix(m)
## LGlover Cache Matrix (R). Make these two functions:
## 1. makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.
## 2. cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
##     If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should
##     retrieve the inverse from the cache.
## When submit: create 40 character SHA-1 hash
## Overall idea: Taking the mean of a long numeric vector can require much computing power & time. In order to
## save us this hassle, cache the value of the mean so it can be found fast. This task will cache the inverse of matrix.
## ******************************
##Note: we will assume the matrix given is always invertible.
# Function to cache matrix
makeCacheMatrix <- function(x = matrix()) {
# first set the inverse to be NULL
inv <- NULL
# next, set the function to the value of the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# function to get the value of the matrix
get <- function() {
x
}
# create a setInverse function to set the inverse of the matrix
setInverse <- function(inverse) {
inv <<- inverse
}
# create a getInverse function to get the inverse of the matrix
getInverse <- function() {
inv
}
# Return a list of the four functions
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## ****************************************
## Continuig from the last function, this 'cacheSolve' function will see if the inverse of the matrix
## is already cached. If so, the function returns the cached inverse. Otherwise,the function re-calculates
## the inverse of the matrix and caches the new value.
cacheSolve <- function(x, ...) {
# Check if inverse is already cached
inv <- x$getInverse()
# If cache has been done, return it
if (!is.null(inv)) {
message("Getting cached data")
return(inv)
}
# Else, calculate the inverse & cache
inv <- solve(x$get(), ...)
x$setInverse(inv)
# Return the inverse
inv
}
cache_m <- makeCacheMatrix(m)
m
cache_m
# Create a matrix
m <- matrix(1:9, 3, 3)
# Create a cached matrix object
cache_m <- makeCacheMatrix(m)
# Calculate the inverse of the cached matrix
inv_m <- cacheSolve(cache_m)
# Create a matrix
m <- matrix(1:9, 3, 3)
# Check for columns of zeros
all(colSums(m) != 0)
cache_m
m
cache_m
det(m)
m <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)
dim(m)
det(m)
dim(m)
det(m)
all(colSums(m) != 0)
m
m <- matrix(1:9, 3, 3)
m
cache_m <- makeCacheMatrix(m)
inv_m <- cacheSolve(cache_m)
det(m)
if (det(m) != 0) {
# The matrix is not singular
} else {
# The matrix is singular
}
# Check if the matrix is singular
is_singular <- det(m) == 0
# If the matrix is singular, print "The matrix is singular"
if (is_singular) {
print("The matrix is singular")
} else {
# The matrix is not singular
}
m<-cache_m$get()
m
inv_m-<solve(m)
inv_m<-solve(m)
solve(m)
inv_m <- cacheSolve(cache_m)
gc()
